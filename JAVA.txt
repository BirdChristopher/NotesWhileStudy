1.Java中System.out.print()默认不换行输出System.out.println()默认换行‘
printf则是继承c语言的特性，可以进行格式化输出，注意还有一些python的特点，可以控制对齐，占位符等等。

2.java中int的封装类是integer，Integer的类方法valueOf（String）可以用于将String转换为数字，但注意是转换为封装类的Integer
而parseInt是转换为基本的int类型数据

3.不要在类的属性定义中做任何操作，类定义是由一个一个声明构成的，比如函数声明，属性声明,还可以初始化，其他的对变量操作等操作
应被放入函数内完成。

4.java中整数类型默认int，小数默认double

5.java中用final来修饰常量，对应c++中的const

6.String类的toCharArray()方法，可以将字符串转换为字符数组
valueOf方法将字符数组转换为string

7.String k = new String(c),这里的参数c可以是一个字符数组或者给定的一句话，利用构造方法可以直接生成想要的string

8.面向对象编程中也是有变量作用域的说法的，在一个类方法中定义的变量是不能拿出来用的~，但是成员变量是可以在类方法中使用的

9.java支持int a[][]这样的方式声明二维数组

10.java中int a[] 和 int[] a是一个意思，都是声明一个数组，java二维数组的声明可以暂时不声明列数，但是必须要声明行数，意思就是说
可以每一行的长度根据情况定义

11.java的switch语句中default语句在没有break的情形下也会受到down through影响

12.java将数组作为参数传参时，本质是传指针，just like c/cpp

13.java的短路机制！！很寄吧有用

14.javaScanner对象的方法还有in.nextInt，in.nextFloat之类，可以很方便的获取单个数据。

15.java的只有类能被import，类方法是不能被import的。

16.String的toCharArray方法可以将字符串转换为字符数组。

17.for循环语句里面支持另一种表达for(int i : <数组>)，这个跟python的的for in 迭代器语句是一样的。
但是好像这个i不能再循环语句外声明，非常的奇怪。为什么？？？

18.java中数组和类对象都是引用类型的数据

19.clone()方法是浅拷贝的，并且必须重载才能使用（加上报错语句），否则无法编译

20.java得对象生成也是用class()来生成的，记得加括号

21.java函数的编写中适用可变参数列表，但是一个列表中的参数只能是同一种数据类型，最终传入的是一个数组的引用，
当然也可以是String[]。所以说对于声明了可变参数列表的函数，可以一个一个地将参数写进去，也可以直接传一个数组，
反正传进去都是一份引用。并且可变参数列表的空间在堆中，意味着不会随着类方法结束被释放！（同样必须是参数列表的最后一项）

22.String a = new String("hello")是冗余的写法。虽然不会报错。

23.java常量池：分为静态常量池和运行时常量池，一般我们考虑的是运行时常量池。对于程序中的字面量，如果不同的String的字面量相等，
编译器只会为这个字面量分配一份空间，所有的String都引用一个地址。

24.对象存储在堆中

25.
1.java中从java.utils中导入的scanner类是专门用于读取用户输入的一个类，有四个常用的类方法：
	1.in.next():自动忽略前导空格，读入一个String，到空格处停止。并且一定要读取到有效字符后才可以
结束输入，意味着如果不输入一直回车，程序会保持等待输入的状态
	2.in.nextLine()以enter为结束符。
	3.in.hasNext()判断标准输入中是否还有字符未读取
	4.in.hasNextLine()判断标准输入中是否含有行没有读取。

2.String对象可以与字符变量做连接运算。

3.有关\r ,\n的知识：（来自于机械打字机）
\r：回车符，用于将输入光标移到行首，\n则是换行符，用于新启一行；
在不同的系统中，真正的换行的完整表示不一样。比如在windows中是\r\n,unix中是\n,mac中是\r。
但是一般在我们编码的时候，编译器会将\n视作换行回车，而在一般输入的时候将enter键视为\r\n两个绑定，
所以一般不用考虑区别，除了少数编写文件的情形。

4.java中==关键字比较的是两个对象的地址，而equals比较的是值

5.String字符串的运算：如果与数字加法，那么会将数字十进制表示完整的加入字符串显示
如果与字符串类型，直接连接，如果与字符类型，则直接连接。
但是注意，如果一个用+连接String时，字符变量，string和数字同时出现，那么可能出现问题。

26.JAVA内置的java.utils.Array类中的类方法Array.sort(nums[])是一个优化过了的排序函数。

27.final变量是：如果在编译时能知道一个变量（包括String）的确切值，那么编译器会将其替换为常量，
相当于c语言中的宏替换。比如说，所有的string对象都是final的
final类：不允许这个类被继承
final方法：不允许子类修改其机制，且能提高运行效率

28.为什么类中的全局变量会被初始化为默认值，而局部变量必须手动初始化才能使用？这是JVM内部的规则决定的，
局部变量的内存在栈上，相对难管理。手动初始化将会提高程序性能并且降低程序出错的可能性，所以JVM规定必须手动初始化。

29.复合赋值符如 a+=5 等价于a = (a的类型)（a+5），可能带来高位截断的问题。
并且java规定，当一个算术表达式包含多个基本类型的值时，整个表达式的数据类型将会自动升高为最高类型。
当然不会发生int->double这样的变化。

30.java也有this关键字，同样也一般用于处理重名的情况，还可以用于在类方法内部调用构造方法

31.构造方法一般来说都是需要重载的。书写构造方法的时候不能加返回值（加了返回值编译没有问题，但是这个方法就不再是构造方法了），
不能有static修饰符。
构造方法可以在方法内部被再次调用，可以用this(args[])来调用类的构造方法，这个时候和普通方法的作用域啥的一样。

32.java没有提供析构方法，但是提供了类似的方法 protected void finalize()，作用是类似的，
修饰符可以选择protected void。析构方法是需要指定返回值的。

33.toString方法事实上是否显式的写出来无所谓。调用打印函数的时候会自动调用。当java要打印一个空串或者别的null值时，它不是
什么都不输出，而是输出‘null’字符串。
toString方法需要重写才能使用。