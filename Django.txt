1.Django进行数据查询时，假设需要查找student对象对应的数据（student在models.py中定义）
则用语句student.objects.get("")语句查找。
注意，如果get语句没有查找到指定的内容，则会导致直接崩溃而不是返回None，
所以一般而言更推荐filter函数

filter函数返回的都是一个QuerySet，是一种特殊的对象，不过似乎可以直接通过下标来访问返回的内容。

注意返回的都是对象。

objects是student表的经理人（manager），必须通过它来执行查找。注意这里的get和字典的get方法不一样。

2.Django的数据库中似乎不对Integer的范围有要求。。。想要约束的话需要对输入的数据约束，而不是依赖
Django数据库报错

3.Django设置外键时，由于外键和另一个表的主键的设置完全相同，所以直接用models.Foreignkey(...)连接就行。

4.makemigrations的作用是Django会去检查创建或修改数据库，如果不合法会给出提示。

5.执行完makemigrations只是生成了对应的sql语句，还并没真正将改动迁移到数据库中。
需要执行migrate才能将改动迁移到数据库，完成建表、修改字段等操作。

6.python manage.py sqlmigrate 可以查看迁移的sql语句，或者自定义批处理语句

7.主键IDs会被自动创建

8.HttpRequest对象会由Django自动创建，但是HttpResponse对象需要我们在每个视图中实例化，填充，返回。

9.HttpResponse的用法：
	1.传入字符串
	2.传入迭代器（会立即消耗迭代器，将内容存储为一个字符串，然后丢弃迭代器）
	3.设置headers
	4.etc

10.HttpResponse携带的能返回的信息本质上就是一段文本，这个文本再被浏览器解析。

11.Django不通过SQL语句来操作数据库。Django假定数据库中的内容都是对象（完全public的），可以在数据库中取出来（filter），
放回去（save），赋值（=赋值），建立新的字段（create），一切都用类方法封装完毕了

12.Django默认每个主表对象都有一个属性是外键的信息（_set），可以通过这个来查询所有与主表有关的子表的信息

13.href只能发出GET请求，action可以发出POST请求。

14.网络中的csrf：
CSRF防御需要我们session中的token,request的cookie中的token和请求url的参数中的csrf验证码一致
当然请求url中的参数token就是从cookie中拿到的


	